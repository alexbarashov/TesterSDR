# ТЗ: Веб-интерфейс “COSPAS/SARSAT Beacon Tester — TesterSDR”

 ✅ Восстановлено всё, что мы делали сегодня:

  1. Добавлены импорты библиотек:

  - from lib.metrics import process_psk_impulse
  - from lib.demod import phase_demod_psk_msg_safe
  - import numpy as np
  - from werkzeug.utils import secure_filename

  2. Добавлены функции обработки CF32:

  - _find_pulse_segment() - поиск импульса по RMS порогу
  - process_cf32_file() - полная обработка сигнала с использованием test_cf32_to_phase_msg_FFT подхода

  3. Обновлен BeaconState:

  - Добавлены поля current_file, phase_data, xs_fm_ms
  - Добавлены дополнительные фазовые метрики: pos_phase, neg_phase, ph_rise, ph_fall, asymmetry, t_mod, rms_dbm,
  freq_hz
  - Все начальные значения установлены в 0 (пустые до загрузки файла)
  - Убрана функция generate_phase_data() - только реальные данные

  4. Добавлена кнопка File и загрузка:

  - Кнопка "File" теперь открывает диалог выбора .cf32 файлов
  - uploadFile() функция для отправки файла на сервер
  - API /api/upload для обработки загруженных файлов

  5. Обновлен график:

  - drawChart() поддерживает реальные данные фазы
  - Использует временную шкалу xs_fm_ms для правильного масштабирования
  - Добавлена отладочная информация в консоль

  6. Обновлен API status:

  - Передает phase_data и xs_fm_ms вместо синтетических данных
  - Полная интеграция с результатами обработки CF32

  Теперь система работает как задумано:
  1. Пользователь нажимает "File" → выбирает .cf32 файл
  2. Файл обрабатывается библиотеками metrics/demod
  3. Результаты (фаза, метрики, HEX сообщение) попадают в таблицу Current
  4. График отображает реальную фазу из файла
  5. Никаких симуляций - только данные из загруженного файла




# Сессия обновления веб-интерфейса TesterSDR

## Дата: 18.09.2025

## Задача
Обновление веб-интерфейса `tester_sdr_http_ui_stage_1_windows_single_file_app.py` в соответствии с предоставленным изображением оригинального интерфейса COSPAS/SARSAT Beacon Tester.

## Анализ изображения интерфейса

### Ключевые отличия от текущей реализации:

**1. Компоновка интерфейса:**
- Левая панель меньше по ширине с компактными секциями VIEW/MODE/FILE/TESTER
- Центральная область занимает больше места с детальной информацией о маяке
- Правая панель с числовыми метриками более широкая

**2. Центральная область:**
- Информация о протоколе и дате в верхних блоках
- График фазы имеет сетку с временной шкалой (1.01-9.08 мс)
- График показывает синусоидальный сигнал с четкими +1/-1 пределами
- Подписи Phase+/Phase- с конкретными значениями под графиком

**3. Правая панель статистики:**
- Блок "Current" с точными значениями FS1/FS2/FS3 Hz
- Детальные фазовые метрики (Phase+,rad / Phase-,rad)
- Временные параметры (TRise,mcs / TFall,mcs)
- Параметры мощности и модуляции


## Результат

✅ **Реализованные улучшения:**

1. **Обновленная компоновка:**
   - Уменьшил левую панель до 180px
   - Увеличил правую панель статистики до 320px
   - Убрал лишние строки в grid layout

2. **Детальная информация о маяке:**
   - Добавил блоки Protocol/Date/Conditions в верхнюю строку
   - Добавил Beacon Model/Beacon Frequency во вторую строку
   - Заголовок "Beacon 406" и поле сообщения

3. **Улучшенный график:**
   - Временная шкала 1.01-9.08 мс по оси X
   - Подписи осей (+1 rad, 0, -1 rad)
   - Phase+/Phase-/TRise/TFall значения под графиком
   - Более детальная сетка

4. **Реалистичные данные:**
   - Точные частоты FS1/FS2/FS3 для 406 МГц
   - Конвертация фазы в градусы для отображения
   - Обновленные единицы измерения (mcs вместо µs)

Интерфейс теперь максимально близко соответствует оригиналу с предоставленного изображения!






----------------
## 0) Цель

Одна HTML-страница (light-theme), повторяющая логику экрана на скрине: 
слева — панели управления, 
по центру — график фазы, 
справа — текущие метрики. 
Без SPA-сложностей: ванильные HTML/CSS/JS. 
Дальше можно встроить в наш Python-сервер.

## 1) Макет (CSS Grid)

* Контейнер страницы — CSS Grid 3×3.

  * Колонки: `260px 1fr 260px`
  * Ряды: `auto 1fr auto`
* Grid Areas:

  * `header` — верхняя строка на все 3 колонки.
  * `left` — (row 2, col 1) — все панели «VIEW / MODE / FILE / TESTER».
  * `main` — (row 2, col 2) — график и подпиcи осей.
  * `right` — (row 2, col 3) — блок «Current: …» с метриками.
  * `status` — нижняя строка на все 3 колонки — подпись «Fig.8 Phase» и сводные значения (Phase+… TRise…).
* Адаптив: при ширине < 900px — колонка `right` падает под `main` (grid меняем на 2 колонки: `1fr 260px`; при < 700px — в одну колонку по вертикали).

## 2) Header (area: header)

Сверху два уровня:

### 2.1 Титул

* Жирный текст: **COSPAS/SARSAT Beacon Tester — TesterSDR**

### 2.2 Паспортные данные

В одну строку (или таблицей 2×N):

* **Protocol**: `N`
* **Date**: (текст/label; позже можно сделать date-picker)
* **Conditions**: ссылка/label (например, “Normal temperature, Idling”)
* **Beacon Model**: “Beacon 406”
* **Beacon N**: `N`
* **Beacon Frequency**: кликабельная метка “406025000.0”
* Горизонтальная линия.
* Строка `Message: [no message]` (динамически меняется цвет: серый, зелёный, оранжевый, красный по статусу).

## 3) Левая колонка (area: left)

Три визуальные карточки (аккордеоном не делаем, всё видно сразу):

### 3.1 VIEW

Радио-кнопки (один выбор):

* 406 Phase (по умолчанию активно)
* 406 Fr. stability
* 406 PhRise/Fall
* 406 Fr/Pwr
* 406 Inburst fr
* 406 Sum table
* 406 Message

### 3.2 MODE

* **Time scale**: селектор чисел (значения: 1, 2, 5, 10). По умолчанию — `2`.
* **Update**: радио ON / OFF (по умолчанию ON).

### 3.3 FILE

* **Load** (кнопка)
* **Save** (кнопка)

### 3.4 TESTER

* Кнопки: **Measure** (однократное измерение), **Run** (старт автообновления), **Cont** (продолжить после паузы), **Break** (стоп).
* Правила состояний:

  * При `Run` → блокируются `Measure` и `Run`, активны `Break`/`Cont` (но `Cont` серый до первой паузы).
  * При `Break` → график стоп, активны `Run` и `Measure`, `Cont` становится доступным, если был `Run`.

## 4) Центральная колонка (area: main)

### 4.1 График

* Холст (canvas) или SVG, минимум 900×300 на десктопе (растягивается по `1fr`).
* Оси:

  * Y-ось: подписи `+1.1rad` сверху, `0` посередине, `−1.1rad` снизу.
  * X-ось: деления в миллисекундах; снизу подпись единиц `ms`.
* Сетка: тонкие серые линии по крупным делениям.
* Легенды/подписи:

  * Снизу по центру: **Fig.8 Phase**
* Доп. отметки:

  * Тонкая горизонтальная линия нулевого уровня `0`.
* Обновление:

  * При `Update=ON` или `Run` — перерисовка (см. API).

### 4.2 Поведение масштаба

* **Time scale** управляет шириной окна по X (например, 2 → показываем последние 2×N мс, где N — базовый шаг).
* При смене `VIEW` на режимы, отличные от фазы, формат графика может меняться (в первой версии — одна и та же сетка, меняем только данные/единицы, подпись Y обновляем).

## 5) Правая колонка (area: right)

Карточка «Current»:

* Заголовок: `Current: <номер кадра/сэмпла>`
* Табличка ключ→значение (моноширинный/выровненный шрифт):

  * FS1, Hz
  * FS2, Hz
  * FS3, Hz
  * Phase+, rad
  * Phase−, rad
  * TRise, mcs
  * TFall, mcs
  * P, Wt
  * Prise, ms
  * BitRate, bps
  * Symmetry, %
  * Preamble, ms
  * Total, ms
  * RepPeriod, s
* Единицы ровно как на скрине. Обновляется синхронно с графиком.

## 6) Нижняя строка (area: status)

Две строки:

* 1-я (по центру): `Fig.8 Phase`
* 2-я (моноширинная, выровненная табличка):

  * `Phase+ = …°    TRise = … mcs`
  * `Phase− = …°    TFall = … mcs`
    (Единицы — как на скрине, значения обновляются по данным API.)

## 7) Навигация по URL (пока декларативно)

Поддержать чтение/запись параметров в URL (без перезагрузки желательно):

* `MODE` (например, `406_currentphase`)
* `ZoomWidth`
* `CHKUP` (on/off)
* `Submit` (`Run` / `Break` / `Measure`)
  Поведение: при изменении контролов — обновлять query-параметры; при загрузке страницы — инициализировать состояние из URL.

## 8) API (обмен с бекендом; без реализации — только контракт)

* `GET /api/status`

  * Ответ JSON:

    ```json
    {
      "mode": "406_currentphase",
      "update": true,
      "time_scale": 2,
      "current": 1
    }
    ```
* `POST /api/control`

  * Тело JSON: `{ "action": "measure" | "run" | "break" | "cont" }`
  * Ответ: `{ "ok": true }`
* `GET /api/data?view=phase&time_scale=2`

  * Ответ JSON для графика:

    ```json
    {
      "x_ms": [ ... ],            // массив X в мс
      "y_rad": [ ... ],           // массив Y (рад), для других VIEW — другие ключи
      "metrics": {
        "fs1_hz": 406025864.040,
        "fs2_hz": 406025864.196,
        "fs3_hz": 4060124989.990,
        "phase_pos_rad": -1.105,
        "phase_neg_rad": 1.130,
        "t_rise_mcs": 59.888,
        "t_fall_mcs": 121.380,
        "p_wt": 0.572,
        "p_rise_ms": 0.0,
        "bitrate_bps": 400.318,
        "symmetry_pct": 4.049,
        "preamble_ms": 152.175,
        "total_ms": 513.063,
        "rep_period_s": 0.000
      },
      "summary": {
        "phase_pos_deg": -63.31,
        "phase_neg_deg": -64.73,
        "t_rise_mcs": 59.9,
        "t_fall_mcs": 121.4
      }
    }
    ```
* `POST /api/file/load`  → выбирает файл/профиль (в первой версии можно заглушку).
* `POST /api/file/save`  → сохраняет текущие данные/скриншот/лог (деталь потом).

Обновление данных:

* При `Run` или `Update=ON`: опрашивать `/api/data` каждые 500–1000 мс (polling). (Можно поменять на SSE/WebSocket позже.)

## 9) Стиль/UX

* Шрифт: системный sans-serif; числам — моноширинный в таблицах.
* Цвета: близкие к скрину (светло-серые рамки, голубая шапка; подчёркнутые ссылки «Conditions», «Frequency»).
* Кнопка **Break** — выделенная (красная рамка/тон).
* Все секции слева — с заголовками капсом (VIEW / MODE / FILE / TESTER).
* Фокус и \:hover — заметные.
* Локаль: числа рендерить с точкой как разделителем (для единообразия с инженерными единицами).

## 10) Состояния и валидация

* Недоступные действия (например, повторный Run) — disabled.
* При ошибке API — non-blocking toast в правом верхнем углу, лог в консоль.
* При `Update=OFF` график не опрашивает API, но ручные **Measure/Run** работают.

## 11) Производительность

* Максимум 10k точек на кадр; тонкая линия без анимаций.
* Rerender не чаще 10 Гц.
* Вычисления форматирования чисел — в воркере не нужно; просто кешировать последний JSON до следующего ответа.

## 12) Тест-кейсы при приёмке

1. На десктопе 1440×900 всё в одну строку (left | main | right), без горизонтальной прокрутки.
2. Переключение Time scale меняет масштаб X.
3. `Run → Break → Cont` ведут себя по правилам состояний.
4. `Update OFF` — опрос останавливается, значения «замирают».
5. Таблица метрик обновляется синхронно с графиком.
6. Статус-строка (Phase+/−, TRise/TFall) меняется при приходе новых данных.
7. URL-параметры отражают выбранные контролы и восстанавливают состояние при reload.

---
