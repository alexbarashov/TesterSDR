#!/usr/bin/env python3
"""
STRICT_COMPAT: –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª—å—Ü–µ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞ IQ
"""

import numpy as np
import threading
import time

# STRICT_COMPAT: –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä IQ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 3+ —Å–µ–∫—É–Ω–¥ —Å–∏–≥–Ω–∞–ª–∞
class IQRingBuffer:
    def __init__(self, duration_sec: float, sample_rate: float):
        self.duration_sec = duration_sec
        self.sample_rate = sample_rate
        self.capacity = int(duration_sec * sample_rate)
        self.buffer = np.zeros(self.capacity, dtype=np.complex64)
        self.write_pos = 0
        self.total_written = 0
        self.lock = threading.Lock()
        print(f"[BUFFER] Created: {self.capacity} samples ({duration_sec}s at {sample_rate:.0f} Hz)")

    def write(self, samples: np.ndarray):
        """–ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç—Å—á–µ—Ç—ã –≤ –∫–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä"""
        with self.lock:
            n = len(samples)
            if n >= self.capacity:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –µ–º–∫–æ—Å—Ç–∏, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
                self.buffer[:] = samples[-self.capacity:]
                self.write_pos = 0
                self.total_written += n
            else:
                # –ó–∞–ø–∏—Å—å –≤ –¥–≤–µ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É
                end_pos = self.write_pos + n
                if end_pos <= self.capacity:
                    self.buffer[self.write_pos:end_pos] = samples
                    self.write_pos = end_pos % self.capacity
                else:
                    first_part = self.capacity - self.write_pos
                    self.buffer[self.write_pos:] = samples[:first_part]
                    self.buffer[:n-first_part] = samples[first_part:]
                    self.write_pos = n - first_part
                self.total_written += n

    def get_segment(self, abs_start: int, abs_end: int) -> np.ndarray:
        """–ò–∑–≤–ª–µ—á—å —Å–µ–≥–º–µ–Ω—Ç –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º"""
        with self.lock:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            oldest_available = max(0, self.total_written - self.capacity)
            if abs_start < oldest_available:
                print(f"[BUFFER] Segment too old: start={abs_start} < oldest={oldest_available}")
                return np.array([], dtype=np.complex64)

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –±—É—Ñ–µ—Ä–µ
            buffer_start = self.total_written - min(self.total_written, self.capacity)
            start_offset = abs_start - buffer_start
            end_offset = abs_end - buffer_start

            if start_offset < 0 or end_offset > self.capacity:
                print(f"[BUFFER] Segment out of bounds: offset={start_offset}..{end_offset}")
                return np.array([], dtype=np.complex64)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –∫–æ–ª—å—Ü–µ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if self.write_pos == 0:
                # –ë—É—Ñ–µ—Ä –ª–∏–Ω–µ–π–Ω—ã–π (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
                return self.buffer[start_offset:end_offset].copy()
            else:
                # –ë—É—Ñ–µ—Ä –∫–æ–ª—å—Ü–µ–≤–æ–π
                logical_start = (self.write_pos + start_offset) % self.capacity
                logical_end = (self.write_pos + end_offset) % self.capacity

                if logical_end > logical_start:
                    return self.buffer[logical_start:logical_end].copy()
                else:
                    # –°–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—É
                    return np.concatenate([
                        self.buffer[logical_start:],
                        self.buffer[:logical_end]
                    ]).copy()


def test_basic_operations():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±—É—Ñ–µ—Ä–∞"""
    print("\n=== –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===")

    # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ 1000 Hz
    buf = IQRingBuffer(duration_sec=1.0, sample_rate=1000.0)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 500 –æ—Ç—Å—á–µ—Ç–æ–≤
    data1 = np.arange(500, dtype=np.complex64)
    buf.write(data1)
    print(f"Written 500 samples, write_pos={buf.write_pos}, total={buf.total_written}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
    segment = buf.get_segment(100, 200)
    expected = np.arange(100, 200, dtype=np.complex64)
    assert np.allclose(segment, expected), "Segment mismatch!"
    print(f"‚úì Extracted segment [100:200]: {len(segment)} samples")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—â–µ 700 –æ—Ç—Å—á–µ—Ç–æ–≤ (–ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ)
    data2 = np.arange(500, 1200, dtype=np.complex64)
    buf.write(data2)
    print(f"Written 700 more samples, write_pos={buf.write_pos}, total={buf.total_written}")

    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
    old_segment = buf.get_segment(0, 100)
    assert old_segment.size == 0, "Old segment should be empty!"
    print(f"‚úì Old segment [0:100] correctly returns empty")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    new_segment = buf.get_segment(1000, 1100)
    expected_new = np.arange(1000, 1100, dtype=np.complex64)
    assert np.allclose(new_segment, expected_new), "New segment mismatch!"
    print(f"‚úì Extracted new segment [1000:1100]: {len(new_segment)} samples")


def test_ring_wraparound():
    """–¢–µ—Å—Ç –∫–æ–ª—å—Ü–µ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
    print("\n=== –¢–ï–°–¢ 2: –ö–æ–ª—å—Ü–µ–≤–∞—è –∑–∞–ø–∏—Å—å ===")

    buf = IQRingBuffer(duration_sec=0.1, sample_rate=1000.0)  # 100 samples

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for i in range(5):
        data = np.full(50, i+1, dtype=np.complex64)
        buf.write(data)
        print(f"Iteration {i+1}: wrote value {i+1}, total_written={buf.total_written}")

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—Ç—Å—á–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è 3,3,3... 4,4,4... 5,5,5...
    segment = buf.get_segment(150, 250)
    print(f"Segment [150:250]: unique values = {np.unique(segment.real)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    old = buf.get_segment(0, 50)
    assert old.size == 0, "Old data should be unavailable"
    print("‚úì Old data correctly unavailable")


def test_actual_sample_rate():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è actual_sample_rate_sps"""
    print("\n=== –¢–ï–°–¢ 3: Actual sample rate ===")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ SDR —Å —Ä–∞–∑–Ω—ã–º–∏ sample rates
    sdr_configs = [
        ("RTL-SDR", 1_024_000),
        ("HackRF", 2_000_000),
        ("RSA306", 875_000),
    ]

    for sdr_name, actual_fs in sdr_configs:
        buf = IQRingBuffer(duration_sec=3.0, sample_rate=actual_fs)

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ RMS
        rms_win_ms = 1.0  # ms
        win_samps = int(rms_win_ms * 1e-3 * actual_fs)

        print(f"{sdr_name}: fs={actual_fs:.0f} Hz, buffer={buf.capacity} samples, RMS window={win_samps} samples")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
        chunk_size = 65536
        chunks_to_fill = (buf.capacity // chunk_size) + 1

        for i in range(chunks_to_fill):
            data = np.random.randn(chunk_size).astype(np.complex64)
            buf.write(data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω
        assert buf.total_written >= buf.capacity
        print(f"  ‚úì Buffer filled: {buf.total_written} total samples written")


def test_concurrent_access():
    """–¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    print("\n=== –¢–ï–°–¢ 4: –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –¥–æ—Å—Ç—É–ø ===")

    buf = IQRingBuffer(duration_sec=1.0, sample_rate=10000.0)
    errors = []

    def writer_thread():
        """–ü–æ—Ç–æ–∫ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for i in range(100):
                data = np.full(100, i, dtype=np.complex64)
                buf.write(data)
                time.sleep(0.001)
        except Exception as e:
            errors.append(f"Writer error: {e}")

    def reader_thread():
        """–ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            for i in range(50):
                start = buf.total_written - 500 if buf.total_written > 500 else 0
                end = start + 100
                segment = buf.get_segment(start, end)
                time.sleep(0.002)
        except Exception as e:
            errors.append(f"Reader error: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    threads = [
        threading.Thread(target=writer_thread),
        threading.Thread(target=reader_thread),
        threading.Thread(target=reader_thread),
    ]

    for t in threads:
        t.start()

    for t in threads:
        t.join()

    if errors:
        print("Errors during concurrent access:")
        for err in errors:
            print(f"  - {err}")
        assert False, "Concurrent access failed!"
    else:
        print("‚úì Concurrent access successful, no race conditions")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("STRICT_COMPAT: IQ Ring Buffer Test Suite")
    print("=" * 60)

    test_basic_operations()
    test_ring_wraparound()
    test_actual_sample_rate()
    test_concurrent_access()

    print("\n" + "=" * 60)
    print("‚úì –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 60)

    # –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("\nüìã –ß–ï–ö-–õ–ò–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("1. ‚úì –ö–æ–ª—å—Ü–µ–≤–æ–π –±—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
    print("2. ‚è≥ –î–æ–±–∞–≤–∏—Ç—å –≤ beacon_tester_web.py –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 33")
    print("3. ‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ init_sdr_backend() —Å actual_sample_rate")
    print("4. ‚è≥ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –ë–ü-—Å–∏–≥–Ω–∞–ª –ø–æ—Å–ª–µ NCO –≤ process_samples_realtime()")
    print("5. ‚è≥ –ò–∑–≤–ª–µ–∫–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã –≤ detect_pulses() –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º")
    print("6. ‚è≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å get_actual_fs() –≤–º–µ—Å—Ç–æ SAMPLE_RATE_SPS")


if __name__ == "__main__":
    main()